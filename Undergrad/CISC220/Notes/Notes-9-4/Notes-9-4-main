#include <cstdlib>
#include <iostream>
#include <cstring>

using namespace std;

//----------------------------------------------------------------------------
//----------------------------------------------------------------------------

class MyString
{
public:
  MyString();
  MyString(char *);
  MyString(const MyString &);
  ~MyString();
  void print()
  {
	if(A != NULL)
		cout << A << endl;
  }
  void print_size() { cout << sizeof(*this) << endl; }
  void change_first_letter(char c) { if (A) { A[0] = c; } }
  MyString & operator=(const MyString &);


private:
  char *A = NULL;
};


//----------------------------------------------------------------------------

MyString::MyString() 
{ 
  A = NULL;
  cout << "zero arg constructor!" << endl; 
}

//----------------------------------------------------------------------------

// copy string passed in into dynamically-allocated char array

MyString::MyString(char *s) 
{ 	
  int n = strlen(s);

  A = new char[n+1];

  cout << "construct from " << n << "-char string \"" << s << "\"" << endl; 

  for (int i = 0; i < n; i++)
    A[i] = s[i];
  A[n] = '\0';
}

//----------------------------------------------------------------------------

// assignment operator

MyString & MyString::operator=(const MyString & rhs)
{
  cout << "assignment!" << endl;

  // free old array

  if (A != NULL)
    delete [] A;

  // allocate and copy over new array

  if (rhs.A == NULL) {
    cout << "rhs is empty" << endl;
    return *this;
  }

  int n = strlen(rhs.A);

  A = new char[n+1];

  for (int i = 0; i < n; i++)
    A[i] = rhs.A[i];
  A[n] = '\0';

  return *this;
}

//----------------------------------------------------------------------------

MyString::MyString(const MyString & src)
{
  cout << "copy constructor!" << endl;

  // allocate and copy over new array

  A = NULL;

  if (src.A == NULL) {
    cout << "src is empty" << endl;
    return;
  }

  int n = strlen(src.A);

  A = new char[n+1];

  for (int i = 0; i < n; i++)
    A[i] = src.A[i];
  A[n] = '\0';

}

//----------------------------------------------------------------------------

MyString::~MyString() 
{ 
  if (A)
    delete [] A;

  cout << "destructor!" << endl; 
}

//----------------------------------------------------------------------------
//----------------------------------------------------------------------------

int main()
{
  cout << "mystring program" << endl;

  MyString s1;
  MyString s2(s1);

  s1.change_first_letter('j');

  s1.print();
  s2.print();


  //  delete s2;

  return 1;
}

/*
ostream & operator <<ostream & outputStream, const MyString & s)
{
	cout << s.A;
	return outputStream;
}
*/

//----------------------------------------------------------------------------
//----------------------------------------------------------------------------


/*
---Dynamic Allocation: Override?---
1. Default Constructor
2. Destructor
3. Copy Constructor (Does shallow copying by default)
4. Assignment Operator ("=")
   -> Calls a function called "::operator=" 

Types of Operators
- Unary Operator (takes one parameters)
- Binary Operator (takes two parameters)
*/
